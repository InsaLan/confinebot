openapi: 3.0.1
info:
  title: Confinebot
  version: 0.0.2
tags:
  - name: Global Stats API
  - name: Match API
  - name: Team API
  - name: Player API
  - name: Server API
  - name: User API
  - name: Auth API
paths:
  /match:
    get:
      summary: List all matches
      operationId: listMatch
      tags:
        - Match API
      responses:
        200:
          description: A list of matches
          content:
            application/json:
              schema:
                type: 'array'
                items:
                  $ref: '#/components/schemas/Match'
    post:
      summary: Create a new match
      operationId: createMatch
      tags:
        - Match API
      requestBody:
        description: Match configuration object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Match'
        required: true
      responses:
        200:
          description: The details of the match
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Match'
  /match/{id}:
    get:
      summary: Get a match object by id
      operationId: getMatch
      tags:
        - Match API
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Match object id
      responses:
        200:
          description: The details of the match
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Match'

    patch:
      summary: Patch a match object by id
      operationId: patchMatch
      tags:
        - Match API
      requestBody:
        description: Match configuration object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Match'
        required: true
        
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Match object id
      responses:
        200:
          description: The details of the match
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Match'

    delete:
      summary: Delete a match object by id
      operationId: deleteMatch
      tags:
        - Match API
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Match object id
      responses:
        200:
          description: Sucessfully deleted

  /match/{id}/rounds:
    get:
      summary: Get match rounds
      operationId: getMatchStats
      tags:
        - Match API
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Match object id
      responses:
        200:
          description: The current stats of the match
          content:
            application/json:
              schema:
                type: 'array'
                items:
                  $ref: '#/components/schemas/Round'

  /match/{id}/kills:
    get:
      summary: Get heatmap
      operationId: getHeatmap
      tags:
        - Match API
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Match object id
      responses:
        200:
          description: The current stats of the match
          content:
            application/json:
              schema:
                type: 'array'
                items:
                  $ref: '#/components/schemas/Kill'

  /match/{id}/players:
    get:
      summary: Get players and stats
      operationId: getMatchPlayers
      tags:
        - Match API
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Match object id
      responses:
        200:
          description: Flemme
          content:
            application/json:
              schema:
                type: 'array'
                items:
                  type: object
                  properties:
                    player:
                      $ref: '#/components/schemas/Player'
                    stats: 
                      $ref: '#/components/schemas/PlayerStats'



  /team:
    get:
      summary: List all teams
      operationId: listTeam
      tags:
        - Team API
      responses:
        200:
          description: A list of teams
          content:
            application/json:
              schema:
                type: 'array'
                items:
                  $ref: '#/components/schemas/Team'
    post:
      summary: Create a new team
      operationId: createTeam
      tags:
        - Team API
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamConfig'
        required: true
      responses:
        200:
          description: The details of the team
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
  /team/{id}:
    get:
      summary: Get a team object by id
      operationId: getTeam
      tags:
        - Team API
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Team object id
      responses:
        200:
          description: The details of the team
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
    patch:
      summary: Patch a team object by id
      operationId: patchTeam
      tags:
        - Team API
      requestBody:
        description: Team configuration object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
        required: true
        
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Team object id
      responses:
        200:
          description: The details of the team
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
                
    delete:
      summary: Delete a team object by id
      operationId: deleteTeam
      tags:
        - Team API
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Team object id
      responses:
        200:
          description: Sucessfully deleted
  /player/{steamid}/stats:
    get:
      summary: Global Player Stats
      operationId: playerStats
      tags:
        - Player API
      parameters:
        - in: path
          name: steamid
          schema:
            type: integer
          required: true
          description: Team object id
      responses:
        200:
          description: Flemme
          content:
            application/json:
              schema:
                type: object
                properties:
                  match:
                    $ref: '#/components/schemas/Match'
                  stats: 
                    $ref: '#/components/schemas/PlayerStats'

  /stats/global/player:
    get:
      summary: By Players
      operationId: getGlobalPlayerStats
      tags:
        - Global Stats API
      responses:
        200:
          description: A list of union player-stats
          content:
            application/json:
              schema:
                type: object
                properties:
                  player:
                    $ref: '#/components/schemas/Player'
                  stats: 
                    $ref: '#/components/schemas/PlayerStats'

  /stats/global/maps/details:
    get:
      summary: By Maps
      operationId: getGlobalMapsStatsDetails
      tags:
        - Global Stats API
      responses:
        200:
          description: xx
          content:
            application/json:
              schema:
                type: 'array'
                items:
                  $ref: '#/components/schemas/RoundsPerMapStats'

  /stats/global/maps/rounds_per_map:
    get:
      summary: By Maps
      operationId: getGlobalMapsStatsRounds
      tags:
        - Global Stats API
      responses:
        200:
          description: xx
          content:
            application/json:
              schema:
                type: 'array'
                items:
                  $ref: '#/components/schemas/MapsStats'

  /stats/global/weapon:
    get:
      summary: By Weapon
      operationId: getGlobalWeaponStats
      tags:
        - Global Stats API
      responses:
        200:
          description: xx
          content:
            application/json:
              schema:
                type: 'array'
                items:
                  $ref: '#/components/schemas/Weapon'

  /stats/global/weapon/topplayers/{nbPlayers}:
    get:
      summary: By Weapon
      operationId: getTopPlayersPerWeapon
      tags:
        - Global Stats API
      parameters:
        - in: path
          name: nbPlayers
          schema:
            type: integer
          required: true
          description: Number of top players to gather
      responses:
        200:
          description: xx
          content:
            application/json:
              schema:
                type: 'array'
                items:
                  type: object
                  properties:
                    weapon:
                      $ref: '#/components/schemas/Weapon'
                    players:
                      type: 'array'
                      items:
                        type: object
                        properties:
                          player:
                            $ref: '#/components/schemas/Player'
                          killNb:
                            type: integer
                      

  /server:
    get:
      summary: List all servers
      operationId: listServers
      tags:
        - Server API
      responses:
        200:
          description: A list of servers
          content:
            application/json:
              schema:
                type: 'array'
                items:
                  $ref: '#/components/schemas/Server'
    post:
      summary: Create a new server
      operationId: createServer
      tags:
        - Server API
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerConfig'
        required: true
      responses:
        200:
          description: The details of the server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Server'
  /server/{id}:
    get:
      summary: Get a server object by id
      operationId: getServer
      tags:
        - Server API
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Server object id
      responses:
        200:
          description: The details of the Server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Server'
    patch:
      summary: Patch a server object by id
      operationId: patchServer
      tags:
        - Server API
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Server object id
      requestBody:
        description: Server configuration object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerConfig'
        required: true
      responses:
        200:
          description: The details of the server
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Server'

    delete:
      summary: Delete a server object by id
      operationId: deleteServer
      tags:
        - Server API
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Team object id
      responses:
        200:
          description: Sucessfully deleted
                
  /user:
    get:
      summary: List all API users
      operationId: listUsers
      tags:
        - User API
      responses:
        200:
          description: A list of users
          content:
            application/json:
              schema:
                type: 'array'
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a new API user
      operationId: createUser
      tags:
        - User API
      requestBody:
        description: Match configuration object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserConfig'
        required: true
      responses:
        200:
          description: The details of the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /user/{id}:
    get:
      summary: Get a API user object by id
      operationId: getUser
      tags:
        - User API
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: User object id
      responses:
        200:
          description: The details of the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    patch:
      summary: Patch a API user object by id
      operationId: patchUser
      tags:
        - User API
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: User object id
      requestBody:
        description: User configuration object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserConfig'
        required: true
      responses:
        200:
          description: The details of the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

                
    delete:
      summary: Delete a API user object by id
      operationId: deleteUser
      tags:
        - User API
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: User object id
      responses:
        200:
          description: Sucessfully deleted
  /login:
    post:
      summary: Get a JWT token
      operationId: login
      tags:
        - Auth API
      requestBody:
        description: Match configuration object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginPayload'
      responses:
        200:
          description: The details of the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
  /logout:
    post:
      summary: Revoke JWT token
      operationId: logout
      tags:
        - Auth API
      responses:
        200:
          description: The details of the user
components:
  schemas:
    LoginPayload:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    Token:
      type: object
      properties:
        jwt:
          type: string
    TeamConfig:
      type: object
      properties:
        name:
          type: string
        nationality:
          type: string
    Team:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        nationality:
          type: string
    RoundsPerMapStats:
      type: object
      properties:
        map:
          type: string
        wonCT:
          type: integer
        wonT:
          type: integer
    MapDetailsPerSide:
      type: object
      properties:
        winNb:
          type: integer
        pistolRounds:
          type: integer
        winProbabilityStarting:
          type: number
    MapsStats:
      type: object
      properties:
        map:
          type: string
        matchesNb:
          type: integer
        drawsNb:
          type: integer
        counter:
          $ref: '#/components/schemas/MapDetailsPerSide'
        terrorist:
          $ref: '#/components/schemas/MapDetailsPerSide'
    MatchPayload:
      type: object
      properties:
        IDteamA:
          type: integer
        IDteamB:
          type: integer
        map:
          type: string
        mapSelectionMode:
          type: string
          enum:
          - BO1
          - BO3
        maxRounds:
          type: integer
          format: int32
        overtime:
          type: boolean
          default: false
        knifeRound:
          type: boolean
          default: true
        streamerReady:
          type: boolean
          default: false
        playAllRounds:
          type: boolean
          default: false
        autostartMatch:
          type: boolean
          default: false
        firstSideTerrorist:
          type: string
          enum:
          - A
          - B
          - random
    DemoDetails:
      type: object
      properties:
        isAvailable:
          type: boolean
        id:
          type: string
        size:
          type: number
    Match:
      type: object
      properties:
        id:
          type: integer
          format: int32
        password:
          type: string
        state:
          type: string
        config:
          $ref: '#/components/schemas/MatchPayload'
        teamA:
          $ref: '#/components/schemas/Team'
        teamB:
          $ref: '#/components/schemas/Team'
        server:
          $ref: '#/components/schemas/Server'
        score:
          type: object
          properties:
            teamA:
              type: integer
            teamB:
              type: integer
        roundPlayedNb:
          type: integer
        longuestRoundSteak:
          type: object
          properties:
            teamA:
              type: integer
            teamB:
              type: integer
        demo:
          $ref: '#/components/schemas/DemoDetails'
    Player:
      type: object
      properties:
        username:
          type: string
        team:
          $ref: '#/components/schemas/Team'
        hasJoinedMatch:
          type: boolean
    Kill:
      type: object
      properties:
        xPos:
          type: integer
        yPos:
          type: integer
        zPos:
          type: integer
        timestamp:
          type: integer
        weapon:
          type: string
        killed:
          $ref: '#/components/schemas/Player'
        killer:
          $ref: '#/components/schemas/Player'

    PlayerStats:
      type: object
      properties:
        kill:
          type: integer
          format: int32
        tk:
          type: integer
          format: int32
        death:
          type: integer
          format: int32
        point:
          type: integer
          format: int32
        headshots:
          type: integer
          format: int32
        bombDefused:
          type: integer
          format: int32
        bombPlanted:
          type: integer
          format: int32
        1v1:
          type: integer
          format: int32
        1v2:
          type: integer
          format: int32
        1v3:
          type: integer
          format: int32
        1v4:
          type: integer
          format: int32
        1v5:
          type: integer
          format: int32
        1killPerRound:
          type: integer
          format: int32
        2killPerRound:
          type: integer
          format: int32
        3killPerRound:
          type: integer
          format: int32
        4killPerRound:
          type: integer
          format: int32
        5killPerRound:
          type: integer
          format: int32
        firstKills:
          type: integer
          format: int32
        weaponStats:
          type: 'array'
          items:
            $ref: '#/components/schemas/Weapon'
    Round:
      type: object
      properties:
        id:
          type: integer
          format: int32
        firstKillPlayer:
          $ref: '#/components/schemas/Player'
        defusePlayer:
          $ref: '#/components/schemas/Player'
        plantedPlayer:
          $ref: '#/components/schemas/Player'
        winnerTeam:
          $ref: '#/components/schemas/Team'
        explosed:
          type: boolean

    ServerConfig:
      type: object
      properties:
        ip:
          type: string
          format: ipv4
        port:
          type: integer
          format: int32
        nickname:
          type: string
    Server:
      type: object
      properties:
        id:
          type: integer
          format: int32
        ip:
          type: string
          format: ipv4
        port:
          type: integer
          format: int32
        nickname:
          type: string
    UserConfig:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    Weapon:
      type: object
      properties:
        name:
          type: string
        image:
          type: string
        headshotHits:
          type: string
        normalHits:
          type: string
    User:
      type: object
      properties:
        id:
          type: integer
          format: int32
        username:
          type: string
        token:
          type: string


